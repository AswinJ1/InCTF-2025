title: Pepes Encryption
id: 1051
category: Reversing
difficulty: Easy
content: |
  **Author**: [AmunRha](https://twitter.com/amun_rha)

  This is yet another xor encryption, a single byte encryption then a multi byte encryption. Once the player figures out the first key, he can find out the second set of keys and that will retrieve the flag.

  The first key is `0x1b` and the second set of keys are `[0x4c, 0x3a, 0x25, 0x1a]` where second set of keys are xored according to their indexes, for all index which is divisble by 4 `0x4c` is used, and so on.

  ![](https://i.imgur.com/zbO4jXa.png)


  Here is the python solver for the challenge
  ```python=

  enc_flag = [0x3e, 0x4f, 0x5d, 0x75, 0x31, 0x4b, 0x45, 0x30, 0x8, 0x4c, 0xd, 0x35, 0x39, 0x7e, 0xd, 0x77, 0x64, 0x53, 0x47, 0x5e, 0x34, 0x55, 0x58, 0x5e, 0x39, 0x12, 0xd, 0x65, 0x24, 0x7e, 0xa, 0x5e, 0x2f, 0x11, 0x4c, 0x5e, 0x25, 0x10, 0x59, 0x69, 0x23, 0x1e, 0x43]


  KEY1 = 0x1b


  f = []
  for i in range(0, len(enc_flag)):
      t1 = enc_flag[i]
      res = 0
      if i%4 == 0:
          res = enc_flag[i] ^ 0x4c
      elif i%4 == 1:
          res = enc_flag[i] ^ 0x3a
      elif i%4 == 2:
          res = enc_flag[i] ^ 0x25
      elif i%4 == 3:
          res = enc_flag[i] ^ 0x1a
      f.append(res)
      
      
  flag = ""
  for i in range(len(f)):
      flag += chr(f[i] ^ KEY1)


  print(flag)
  ```


